//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// dma_server_awready             O     1 const
// dma_server_wready              O     1 const
// dma_server_bvalid              O     1 const
// dma_server_bid                 O    16 const
// dma_server_bresp               O     2 const
// dma_server_arready             O     1 const
// dma_server_rvalid              O     1 const
// dma_server_rid                 O    16 const
// dma_server_rdata               O   512 const
// dma_server_rresp               O     2 const
// dma_server_rlast               O     1 const
// RDY_set_verbosity              O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// dma_server_awvalid             I     1 unused
// dma_server_awid                I    16 unused
// dma_server_awaddr              I    64 unused
// dma_server_awlen               I     8 unused
// dma_server_awsize              I     3 unused
// dma_server_awburst             I     2 unused
// dma_server_awlock              I     1 unused
// dma_server_awcache             I     4 unused
// dma_server_awprot              I     3 unused
// dma_server_awqos               I     4 unused
// dma_server_awregion            I     4 unused
// dma_server_wvalid              I     1 unused
// dma_server_wdata               I   512 unused
// dma_server_wstrb               I    64 unused
// dma_server_wlast               I     1 unused
// dma_server_bready              I     1 unused
// dma_server_arvalid             I     1 unused
// dma_server_arid                I    16 unused
// dma_server_araddr              I    64 unused
// dma_server_arlen               I     8 unused
// dma_server_arsize              I     3 unused
// dma_server_arburst             I     2 unused
// dma_server_arlock              I     1 unused
// dma_server_arcache             I     4 unused
// dma_server_arprot              I     3 unused
// dma_server_arqos               I     4 unused
// dma_server_arregion            I     4 unused
// dma_server_rready              I     1 unused
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_ma_ddr4_ready               I     1
// EN_hart0_server_reset_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     mem_master_awvalid,

	     mem_master_awid,

	     mem_master_awaddr,

	     mem_master_awlen,

	     mem_master_awsize,

	     mem_master_awburst,

	     mem_master_awlock,

	     mem_master_awcache,

	     mem_master_awprot,

	     mem_master_awqos,

	     mem_master_awregion,

	     mem_master_awready,

	     mem_master_wvalid,

	     mem_master_wdata,

	     mem_master_wstrb,

	     mem_master_wlast,

	     mem_master_wready,

	     mem_master_bvalid,
	     mem_master_bid,
	     mem_master_bresp,

	     mem_master_bready,

	     mem_master_arvalid,

	     mem_master_arid,

	     mem_master_araddr,

	     mem_master_arlen,

	     mem_master_arsize,

	     mem_master_arburst,

	     mem_master_arlock,

	     mem_master_arcache,

	     mem_master_arprot,

	     mem_master_arqos,

	     mem_master_arregion,

	     mem_master_arready,

	     mem_master_rvalid,
	     mem_master_rid,
	     mem_master_rdata,
	     mem_master_rresp,
	     mem_master_rlast,

	     mem_master_rready,

	     dma_server_awvalid,
	     dma_server_awid,
	     dma_server_awaddr,
	     dma_server_awlen,
	     dma_server_awsize,
	     dma_server_awburst,
	     dma_server_awlock,
	     dma_server_awcache,
	     dma_server_awprot,
	     dma_server_awqos,
	     dma_server_awregion,

	     dma_server_awready,

	     dma_server_wvalid,
	     dma_server_wdata,
	     dma_server_wstrb,
	     dma_server_wlast,

	     dma_server_wready,

	     dma_server_bvalid,

	     dma_server_bid,

	     dma_server_bresp,

	     dma_server_bready,

	     dma_server_arvalid,
	     dma_server_arid,
	     dma_server_araddr,
	     dma_server_arlen,
	     dma_server_arsize,
	     dma_server_arburst,
	     dma_server_arlock,
	     dma_server_arcache,
	     dma_server_arprot,
	     dma_server_arqos,
	     dma_server_arregion,

	     dma_server_arready,

	     dma_server_rvalid,

	     dma_server_rid,

	     dma_server_rdata,

	     dma_server_rresp,

	     dma_server_rlast,

	     dma_server_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     EN_ma_ddr4_ready,
	     RDY_ma_ddr4_ready,

	     mv_status);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [15 : 0] dma_server_awid;
  input  [63 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [511 : 0] dma_server_wdata;
  input  [63 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [15 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [15 : 0] dma_server_arid;
  input  [63 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [15 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [511 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [511 : 0] dma_server_rdata;
  wire [63 : 0] imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata;
  wire [15 : 0] dma_server_bid, dma_server_rid;
  wire [7 : 0] imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb,
	       mem_master_arlen,
	       mem_master_awlen,
	       mem_master_wstrb,
	       mv_status;
  wire [3 : 0] imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize,
	       mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] dma_server_bresp,
	       dma_server_rresp,
	       imem_master_arburst,
	       imem_master_awburst,
	       mem_master_arburst,
	       mem_master_awburst;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_ma_ddr4_ready,
       RDY_set_verbosity,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       hart0_server_reset_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_csr_pc
  reg [31 : 0] rg_csr_pc;
  wire [31 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [31 : 0] rg_csr_val1;
  wire [31 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg [1 : 0] rg_epoch;
  reg [1 : 0] rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  reg [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register s1_to_s2
  reg s1_to_s2;
  wire s1_to_s2$D_IN, s1_to_s2$EN;

  // register s2_to_s3
  reg s2_to_s3;
  wire s2_to_s3$D_IN, s2_to_s3$EN;

  // register s3_deq
  reg s3_deq;
  wire s3_deq$D_IN, s3_deq$EN;

  // register sD_to_s1
  reg sD_to_s1;
  wire sD_to_s1$D_IN, sD_to_s1$EN;

  // register sF_to_sD
  reg sF_to_sD;
  wire sF_to_sD$D_IN, sF_to_sD$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [305 : 0] stage1_rg_stage_input;
  wire [305 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [168 : 0] stage2_rg_stage2;
  wire [168 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [103 : 0] stage3_rg_stage3;
  wire [103 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [137 : 0] stageD_rg_data;
  wire [137 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg [1 : 0] stageF_rg_epoch;
  reg [1 : 0] stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  wire [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  wire [511 : 0] near_mem$dma_server_rdata, near_mem$dma_server_wdata;
  wire [63 : 0] near_mem$dma_server_araddr,
		near_mem$dma_server_awaddr,
		near_mem$dma_server_wstrb,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$mem_master_araddr,
		near_mem$mem_master_awaddr,
		near_mem$mem_master_rdata,
		near_mem$mem_master_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$imem_tval;
  wire [15 : 0] near_mem$dma_server_arid,
		near_mem$dma_server_awid,
		near_mem$dma_server_bid,
		near_mem$dma_server_rid;
  wire [7 : 0] near_mem$dma_server_arlen,
	       near_mem$dma_server_awlen,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$mem_master_arlen,
	       near_mem$mem_master_awlen,
	       near_mem$mem_master_wstrb,
	       near_mem$mv_status,
	       near_mem$server_fence_request_put;
  wire [3 : 0] near_mem$dma_server_arcache,
	       near_mem$dma_server_arqos,
	       near_mem$dma_server_arregion,
	       near_mem$dma_server_awcache,
	       near_mem$dma_server_awqos,
	       near_mem$dma_server_awregion,
	       near_mem$dmem_exc_code,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$mem_master_arcache,
	       near_mem$mem_master_arid,
	       near_mem$mem_master_arqos,
	       near_mem$mem_master_arregion,
	       near_mem$mem_master_awcache,
	       near_mem$mem_master_awid,
	       near_mem$mem_master_awqos,
	       near_mem$mem_master_awregion,
	       near_mem$mem_master_bid,
	       near_mem$mem_master_rid;
  wire [2 : 0] near_mem$dma_server_arprot,
	       near_mem$dma_server_arsize,
	       near_mem$dma_server_awprot,
	       near_mem$dma_server_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3,
	       near_mem$mem_master_arprot,
	       near_mem$mem_master_arsize,
	       near_mem$mem_master_awprot,
	       near_mem$mem_master_awsize;
  wire [1 : 0] near_mem$dma_server_arburst,
	       near_mem$dma_server_awburst,
	       near_mem$dma_server_bresp,
	       near_mem$dma_server_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv,
	       near_mem$mem_master_arburst,
	       near_mem$mem_master_awburst,
	       near_mem$mem_master_bresp,
	       near_mem$mem_master_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_ma_ddr4_ready,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dma_server_arlock,
       near_mem$dma_server_arready,
       near_mem$dma_server_arvalid,
       near_mem$dma_server_awlock,
       near_mem$dma_server_awready,
       near_mem$dma_server_awvalid,
       near_mem$dma_server_bready,
       near_mem$dma_server_bvalid,
       near_mem$dma_server_rlast,
       near_mem$dma_server_rready,
       near_mem$dma_server_rvalid,
       near_mem$dma_server_wlast,
       near_mem$dma_server_wready,
       near_mem$dma_server_wvalid,
       near_mem$dmem_exc,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_op,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_req_mstatus_MXR,
       near_mem$imem_req_sstatus_SUM,
       near_mem$imem_valid,
       near_mem$mem_master_arlock,
       near_mem$mem_master_arready,
       near_mem$mem_master_arvalid,
       near_mem$mem_master_awlock,
       near_mem$mem_master_awready,
       near_mem$mem_master_awvalid,
       near_mem$mem_master_bready,
       near_mem$mem_master_bvalid,
       near_mem$mem_master_rlast,
       near_mem$mem_master_rready,
       near_mem$mem_master_rvalid,
       near_mem$mem_master_wlast,
       near_mem$mem_master_wready,
       near_mem$mem_master_wvalid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [31 : 0] stageF_branch_predictor$predict_req_pc;
  wire [98 : 0] stageF_branch_predictor$bp_train_cf_info;
  wire [31 : 0] stageF_branch_predictor$bp_train_instr,
		stageF_branch_predictor$bp_train_pc,
		stageF_branch_predictor$predict_rsp,
		stageF_branch_predictor$predict_rsp_instr;
  wire stageF_branch_predictor$EN_bp_train,
       stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$RDY_predict_req,
       stageF_branch_predictor$bp_train_is_i32_not_i16,
       stageF_branch_predictor$predict_rsp_is_i32_not_i16;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [31 : 0] MUX_rg_trap_instr$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_near_mem$imem_req_1__SEL_1,
       MUX_near_mem$imem_req_1__SEL_2,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_s1_to_s2$write_1__VAL_1,
       MUX_sD_to_s1$write_1__VAL_1,
       MUX_sF_to_sD$write_1__VAL_1,
       MUX_stage1_rg_full$write_1__VAL_8,
       MUX_stage2_rg_full$write_1__VAL_3,
       MUX_stageD_rg_full$write_1__VAL_10,
       MUX_stageF_rg_full$write_1__VAL_7;

  // remaining internal signals
  reg [31 : 0] IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659,
	       _theResult_____1_fst__h7851,
	       rs1_val__h15766,
	       x_out_cf_info_taken_PC__h8505,
	       x_out_data_to_stage2_addr__h6595,
	       x_out_data_to_stage2_val1__h6596,
	       x_out_data_to_stage3_rd_val__h6021;
  reg [4 : 0] x_out_data_to_stage3_rd__h6020;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q3,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q12,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q13,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_1_ETC__q14,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4,
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440,
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444,
	      alu_outputs_exc_code__h7166;
  reg [1 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16,
	      CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5,
	      IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529;
  reg CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q10,
      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q8,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q9,
      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234,
      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308,
      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322,
      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376;
  wire [127 : 0] csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1254;
  wire [63 : 0] _theResult____h14607,
		cpi__h14609,
		cpifrac__h14610,
		delta_CPI_cycles__h14605,
		delta_CPI_instrs___1__h14642,
		delta_CPI_instrs__h14606,
		x__h14608;
  wire [31 : 0] IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d735,
		IF_csr_regfile_read_csr_rg_trap_instr_251_BITS_ETC___d1304,
		IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d660,
		SEXT_stage1_rg_stage_input_59_BITS_87_TO_76_15___d316,
		_theResult_____1_fst__h7844,
		_theResult_____1_fst__h7879,
		_theResult___snd_snd__h8801,
		alu_outputs___1_addr__h6748,
		alu_outputs___1_addr__h6955,
		alu_outputs___1_val1__h6850,
		alu_outputs___1_val1__h6888,
		alu_outputs___1_val1__h7151,
		alu_outputs_cf_info_fallthru_PC__h8496,
		alu_outputs_cf_info_taken_PC__h8497,
		branch_target__h6726,
		data_to_stage2_addr__h6585,
		eaddr__h6925,
		fall_through_pc__h6535,
		next_pc__h6536,
		next_pc__h6754,
		next_pc__h6781,
		rd_val___1__h7759,
		rd_val___1__h7840,
		rd_val___1__h7847,
		rd_val___1__h7854,
		rd_val___1__h7861,
		rd_val___1__h7868,
		rd_val__h6437,
		rd_val__h6511,
		rd_val__h6895,
		rd_val__h6909,
		rd_val__h8702,
		rd_val__h8753,
		rd_val__h8775,
		ret_pc__h6755,
		rs1_val__h15083,
		rs1_val_bypassed__h3794,
		rs2_val__h6722,
		trap_info_tval__h8338,
		val__h6439,
		val__h6513,
		value__h8383,
		x_out_cf_info_fallthru_PC__h8504,
		x_out_data_to_stage2_val2__h6597,
		x_out_next_pc__h6552,
		y__h16035;
  wire [20 : 0] decoded_instr_imm21_UJ__h12409,
		stage1_rg_stage_input_BITS_30_TO_10__q2;
  wire [12 : 0] decoded_instr_imm13_SB__h12407,
		stage1_rg_stage_input_BITS_63_TO_51__q1;
  wire [11 : 0] decoded_instr_imm12_S__h12406,
		stage1_rg_stage_input_BITS_75_TO_64__q6,
		stage1_rg_stage_input_BITS_87_TO_76__q7;
  wire [9 : 0] decoded_instr_funct10__h12404;
  wire [4 : 0] data_to_stage2_rd__h6584,
	       shamt__h6837,
	       x_out_data_to_stage2_rd__h6594;
  wire [3 : 0] IF_NOT_stage1_rg_stage_input_59_BITS_112_TO_11_ETC___d389,
	       IF_rg_cur_priv_5_EQ_0b11_12_AND_stage1_rg_stag_ETC___d426,
	       IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447,
	       alu_outputs___1_exc_code__h6745,
	       alu_outputs___1_exc_code__h7147,
	       cur_verbosity__h2190,
	       x_exc_code__h19754,
	       x_out_trap_info_exc_code__h8343;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__7_03_OR_NOT_near_m_ETC___d144,
	       IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578,
	       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148,
	       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93,
	       IF_stage2_rg_stage2_1_BITS_102_TO_101_2_EQ_0_3_ETC___d92,
	       new_epoch__h10618;
  wire IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1038,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1173,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1174,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1185,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1211,
       IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105,
       IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1109,
       IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1113,
       IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1117,
       IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302,
       IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223,
       IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225,
       IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227,
       IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d296,
       IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d366,
       IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d729,
       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012,
       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163,
       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165,
       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379,
       NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d1071,
       NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23,
       NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1091,
       NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1121,
       NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020,
       NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d116,
       NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1019,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1032,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1034,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1057,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1080,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1218,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1226,
       NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1052,
       NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1054,
       NOT_stage1_rg_stage_input_59_BITS_112_TO_110_8_ETC___d273,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1355,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1359,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d520,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536,
       NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d542,
       csr_regfile_RDY_server_reset_request_put__60_A_ETC___d972,
       csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1177,
       csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1181,
       csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1208,
       near_mem_imem_valid__58_AND_near_mem_imem_exc__ETC___d956,
       rg_cur_priv_5_EQ_0b11_12_OR_rg_cur_priv_5_EQ_0_ETC___d424,
       rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230,
       rg_state_4_EQ_3_039_AND_stage3_rg_full_1_OR_NO_ETC___d1049,
       rg_trap_info_240_BITS_67_TO_36_241_EQ_csr_regf_ETC___d1250,
       stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382,
       stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d351,
       stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d696,
       stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d1015,
       stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161,
       stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179,
       stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d691,
       stage3_rg_full_1_OR_NOT_IF_stage2_rg_full_0_TH_ETC___d1047,
       stageD_f_reset_rsps_i_notEmpty__81_AND_stage1__ETC___d994;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = near_mem$mem_master_awvalid ;

  // value method mem_master_m_awid
  assign mem_master_awid = near_mem$mem_master_awid ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = near_mem$mem_master_awaddr ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = near_mem$mem_master_awlen ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = near_mem$mem_master_awsize ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = near_mem$mem_master_awburst ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = near_mem$mem_master_awlock ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = near_mem$mem_master_awcache ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = near_mem$mem_master_awprot ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = near_mem$mem_master_awqos ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = near_mem$mem_master_awregion ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = near_mem$mem_master_wvalid ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = near_mem$mem_master_wdata ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = near_mem$mem_master_wstrb ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = near_mem$mem_master_wlast ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = near_mem$mem_master_bready ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = near_mem$mem_master_arvalid ;

  // value method mem_master_m_arid
  assign mem_master_arid = near_mem$mem_master_arid ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = near_mem$mem_master_araddr ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = near_mem$mem_master_arlen ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = near_mem$mem_master_arsize ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = near_mem$mem_master_arburst ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = near_mem$mem_master_arlock ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = near_mem$mem_master_arcache ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = near_mem$mem_master_arprot ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = near_mem$mem_master_arqos ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = near_mem$mem_master_arregion ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = near_mem$mem_master_rready ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = near_mem$dma_server_awready ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = near_mem$dma_server_wready ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = near_mem$dma_server_bvalid ;

  // value method dma_server_m_bid
  assign dma_server_bid = near_mem$dma_server_bid ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = near_mem$dma_server_bresp ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = near_mem$dma_server_arready ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = near_mem$dma_server_rvalid ;

  // value method dma_server_m_rid
  assign dma_server_rid = near_mem$dma_server_rid ;

  // value method dma_server_m_rdata
  assign dma_server_rdata = near_mem$dma_server_rdata ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = near_mem$dma_server_rresp ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = near_mem$dma_server_rlast ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = near_mem$mv_status ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dma_server_araddr(near_mem$dma_server_araddr),
		      .dma_server_arburst(near_mem$dma_server_arburst),
		      .dma_server_arcache(near_mem$dma_server_arcache),
		      .dma_server_arid(near_mem$dma_server_arid),
		      .dma_server_arlen(near_mem$dma_server_arlen),
		      .dma_server_arlock(near_mem$dma_server_arlock),
		      .dma_server_arprot(near_mem$dma_server_arprot),
		      .dma_server_arqos(near_mem$dma_server_arqos),
		      .dma_server_arregion(near_mem$dma_server_arregion),
		      .dma_server_arsize(near_mem$dma_server_arsize),
		      .dma_server_arvalid(near_mem$dma_server_arvalid),
		      .dma_server_awaddr(near_mem$dma_server_awaddr),
		      .dma_server_awburst(near_mem$dma_server_awburst),
		      .dma_server_awcache(near_mem$dma_server_awcache),
		      .dma_server_awid(near_mem$dma_server_awid),
		      .dma_server_awlen(near_mem$dma_server_awlen),
		      .dma_server_awlock(near_mem$dma_server_awlock),
		      .dma_server_awprot(near_mem$dma_server_awprot),
		      .dma_server_awqos(near_mem$dma_server_awqos),
		      .dma_server_awregion(near_mem$dma_server_awregion),
		      .dma_server_awsize(near_mem$dma_server_awsize),
		      .dma_server_awvalid(near_mem$dma_server_awvalid),
		      .dma_server_bready(near_mem$dma_server_bready),
		      .dma_server_rready(near_mem$dma_server_rready),
		      .dma_server_wdata(near_mem$dma_server_wdata),
		      .dma_server_wlast(near_mem$dma_server_wlast),
		      .dma_server_wstrb(near_mem$dma_server_wstrb),
		      .dma_server_wvalid(near_mem$dma_server_wvalid),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .mem_master_arready(near_mem$mem_master_arready),
		      .mem_master_awready(near_mem$mem_master_awready),
		      .mem_master_bid(near_mem$mem_master_bid),
		      .mem_master_bresp(near_mem$mem_master_bresp),
		      .mem_master_bvalid(near_mem$mem_master_bvalid),
		      .mem_master_rdata(near_mem$mem_master_rdata),
		      .mem_master_rid(near_mem$mem_master_rid),
		      .mem_master_rlast(near_mem$mem_master_rlast),
		      .mem_master_rresp(near_mem$mem_master_rresp),
		      .mem_master_rvalid(near_mem$mem_master_rvalid),
		      .mem_master_wready(near_mem$mem_master_wready),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_ma_ddr4_ready(near_mem$EN_ma_ddr4_ready),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(near_mem$imem_tval),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .mem_master_awvalid(near_mem$mem_master_awvalid),
		      .mem_master_awid(near_mem$mem_master_awid),
		      .mem_master_awaddr(near_mem$mem_master_awaddr),
		      .mem_master_awlen(near_mem$mem_master_awlen),
		      .mem_master_awsize(near_mem$mem_master_awsize),
		      .mem_master_awburst(near_mem$mem_master_awburst),
		      .mem_master_awlock(near_mem$mem_master_awlock),
		      .mem_master_awcache(near_mem$mem_master_awcache),
		      .mem_master_awprot(near_mem$mem_master_awprot),
		      .mem_master_awqos(near_mem$mem_master_awqos),
		      .mem_master_awregion(near_mem$mem_master_awregion),
		      .mem_master_wvalid(near_mem$mem_master_wvalid),
		      .mem_master_wdata(near_mem$mem_master_wdata),
		      .mem_master_wstrb(near_mem$mem_master_wstrb),
		      .mem_master_wlast(near_mem$mem_master_wlast),
		      .mem_master_bready(near_mem$mem_master_bready),
		      .mem_master_arvalid(near_mem$mem_master_arvalid),
		      .mem_master_arid(near_mem$mem_master_arid),
		      .mem_master_araddr(near_mem$mem_master_araddr),
		      .mem_master_arlen(near_mem$mem_master_arlen),
		      .mem_master_arsize(near_mem$mem_master_arsize),
		      .mem_master_arburst(near_mem$mem_master_arburst),
		      .mem_master_arlock(near_mem$mem_master_arlock),
		      .mem_master_arcache(near_mem$mem_master_arcache),
		      .mem_master_arprot(near_mem$mem_master_arprot),
		      .mem_master_arqos(near_mem$mem_master_arqos),
		      .mem_master_arregion(near_mem$mem_master_arregion),
		      .mem_master_rready(near_mem$mem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .dma_server_awready(near_mem$dma_server_awready),
		      .dma_server_wready(near_mem$dma_server_wready),
		      .dma_server_bvalid(near_mem$dma_server_bvalid),
		      .dma_server_bid(near_mem$dma_server_bid),
		      .dma_server_bresp(near_mem$dma_server_bresp),
		      .dma_server_arready(near_mem$dma_server_arready),
		      .dma_server_rvalid(near_mem$dma_server_rvalid),
		      .dma_server_rid(near_mem$dma_server_rid),
		      .dma_server_rdata(near_mem$dma_server_rdata),
		      .dma_server_rresp(near_mem$dma_server_rresp),
		      .dma_server_rlast(near_mem$dma_server_rlast),
		      .RDY_ma_ddr4_ready(),
		      .mv_status(near_mem$mv_status));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_reqs$ENQ),
						.DEQ(stageD_f_reset_reqs$DEQ),
						.CLR(stageD_f_reset_reqs$CLR),
						.FULL_N(stageD_f_reset_reqs$FULL_N),
						.EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_rsps$ENQ),
						.DEQ(stageD_f_reset_rsps$DEQ),
						.CLR(stageD_f_reset_rsps$CLR),
						.FULL_N(stageD_f_reset_rsps$FULL_N),
						.EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .bp_train_cf_info(stageF_branch_predictor$bp_train_cf_info),
					     .bp_train_instr(stageF_branch_predictor$bp_train_instr),
					     .bp_train_is_i32_not_i16(stageF_branch_predictor$bp_train_is_i32_not_i16),
					     .bp_train_pc(stageF_branch_predictor$bp_train_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .predict_rsp_instr(stageF_branch_predictor$predict_rsp_instr),
					     .predict_rsp_is_i32_not_i16(stageF_branch_predictor$predict_rsp_is_i32_not_i16),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .EN_bp_train(stageF_branch_predictor$EN_bp_train),
					     .RDY_reset(),
					     .RDY_predict_req(stageF_branch_predictor$RDY_predict_req),
					     .predict_rsp(stageF_branch_predictor$predict_rsp),
					     .RDY_bp_train());

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_reqs$ENQ),
						.DEQ(stageF_f_reset_reqs$DEQ),
						.CLR(stageF_f_reset_reqs$CLR),
						.FULL_N(stageF_f_reset_reqs$FULL_N),
						.EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_rsps$ENQ),
						.DEQ(stageF_f_reset_rsps$DEQ),
						.CLR(stageF_f_reset_rsps$CLR),
						.FULL_N(stageF_f_reset_rsps$FULL_N),
						.EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd12 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1038 &&
	     rg_state_4_EQ_3_039_AND_stage3_rg_full_1_OR_NO_ETC___d1049 &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1057 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe = CAN_FIRE_RL_rl_pipe ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd3 && !stage3_rg_full &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd12 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     rg_state == 4'd4 && (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd6 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C =
	     CAN_FIRE_RL_rl_stage1_CSRR_S_or_C ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd7 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     stageF_branch_predictor$RDY_predict_req && rg_state == 4'd8 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     (IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd8 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd9 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd10) &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd6 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd5 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd11 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     stageF_branch_predictor$RDY_predict_req && rg_state == 4'd12 &&
	     csr_regfile$wfi_resume &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd12 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_5 ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     stageF_branch_predictor$RDY_predict_req && rg_state == 4'd5 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd3 &&
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1359 &&
	     (!stageF_rg_full || near_mem$imem_valid) ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__60_A_ETC___d972 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_near_mem$imem_req_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_near_mem$imem_req_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	     NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1121 ;
  assign MUX_rg_next_pc$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1174 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_f_reset_rsps$EMPTY_N &&
	     stageD_f_reset_rsps_i_notEmpty__81_AND_stage1__ETC___d994 &&
	     rg_state == 4'd1 ;
  assign MUX_rg_state$write_1__SEL_5 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd3 ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h16035 or
	  IF_csr_regfile_read_csr_rg_trap_instr_251_BITS_ETC___d1304)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_251_BITS_ETC___d1304;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h16035;
    endcase
  end
  assign MUX_rg_state$write_1__VAL_2 = rg_run_on_reset ? 4'd3 : 4'd2 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_1 ? 4'd8 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     csr_regfile$access_permitted_2 ? 4'd8 : 4'd4 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { stage1_rg_stage_input[305:274], 4'd2, value__h8383 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { stage2_rg_stage2[166:135],
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[95:64] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[268] ?
		 stage1_rg_stage_input[267:232] :
		 { alu_outputs_exc_code__h7166, trap_info_tval__h8338 } } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { stage1_rg_stage_input[305:274], x_exc_code__h19754, 32'd0 } ;
  assign MUX_rg_trap_instr$write_1__VAL_1 = stage1_rg_stage_input[231:200] ;
  assign MUX_s1_to_s2$write_1__VAL_1 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1218 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) &&
	     NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1091 ;
  assign MUX_sD_to_s1$write_1__VAL_1 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 &&
	     stageD_rg_full ;
  assign MUX_sF_to_sD$write_1__VAL_1 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid ;
  assign MUX_stage1_rg_full$write_1__VAL_8 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 &&
	     stageD_rg_full ||
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023 ?
		IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
		4'd0 &&
		!IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 &&
		stageF_rg_full &&
		!near_mem$imem_valid :
		stage1_rg_full) ;
  assign MUX_stage2_rg_full$write_1__VAL_3 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023 ?
	       IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	       4'd0 &&
	       (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
		!stageF_rg_full ||
		near_mem$imem_valid) :
	       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	       2'd2 &&
	       IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	       2'd0 ;
  assign MUX_stageD_rg_full$write_1__VAL_10 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid ||
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027 &&
	     stageD_rg_full ;
  assign MUX_stageF_rg_full$write_1__VAL_7 =
	     ((IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	       !stageD_rg_full) &&
	      stageF_rg_full &&
	      near_mem$imem_valid) ?
	       csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1208 :
	       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1211 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = stage1_rg_stage_input[305:274] ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h6596 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_near_mem$imem_req_1__SEL_1 or
	  new_epoch__h10618 or
	  MUX_rg_state$write_1__SEL_7 or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_near_mem$imem_req_1__SEL_1: rg_epoch$D_IN = new_epoch__h10618;
      MUX_rg_state$write_1__SEL_7: rg_epoch$D_IN = new_epoch__h10618;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 2'd0;
      default: rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_9 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h6552 or
	  MUX_rg_next_pc$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h6552;
      MUX_rg_next_pc$write_1__SEL_2: rg_next_pc$D_IN = x_out_next_pc__h6552;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      default: rg_next_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	     NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1121 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = 1'd0 ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_9 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = MUX_near_mem$imem_req_1__SEL_1 ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = MUX_near_mem$imem_req_1__SEL_1 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__SEL_9 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'd3;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_1 || MUX_rg_state$write_1__SEL_9:
	  rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd9;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd12;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1174 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       stage1_rg_stage_input[231:200] :
	       stage2_rg_stage2[134:103] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register s1_to_s2
  assign s1_to_s2$D_IN = WILL_FIRE_RL_rl_pipe && MUX_s1_to_s2$write_1__VAL_1 ;
  assign s1_to_s2$EN = WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_reset_start ;

  // register s2_to_s3
  assign s2_to_s3$D_IN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd2 ;
  assign s2_to_s3$EN = WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_reset_start ;

  // register s3_deq
  assign s3_deq$D_IN = WILL_FIRE_RL_rl_pipe && stage3_rg_full ;
  assign s3_deq$EN = WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_reset_start ;

  // register sD_to_s1
  assign sD_to_s1$D_IN = WILL_FIRE_RL_rl_pipe && MUX_sD_to_s1$write_1__VAL_1 ;
  assign sD_to_s1$EN = WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_reset_start ;

  // register sF_to_sD
  assign sF_to_sD$D_IN = WILL_FIRE_RL_rl_pipe && MUX_sF_to_sD$write_1__VAL_1 ;
  assign sF_to_sD$EN = WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_reset_start ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_8 or MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset || WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_8;
    MUX_near_mem$imem_req_1__SEL_1: stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104],
	       stageD_rg_data[101:32],
	       16'hAAAA,
	       stageD_rg_data[31:0],
	       stageD_rg_data[38:32],
	       stageD_rg_data[43:39],
	       stageD_rg_data[51:47],
	       stageD_rg_data[56:52],
	       stageD_rg_data[63:59],
	       stageD_rg_data[63:52],
	       stageD_rg_data[46:44],
	       stageD_rg_data[63:59],
	       stageD_rg_data[63:57],
	       decoded_instr_funct10__h12404,
	       stageD_rg_data[63:52],
	       decoded_instr_imm12_S__h12406,
	       decoded_instr_imm13_SB__h12407,
	       stageD_rg_data[63:44],
	       decoded_instr_imm21_UJ__h12409,
	       stageD_rg_data[59:52],
	       stageD_rg_data[58:57] } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_trap or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_3 or MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_3;
    MUX_near_mem$imem_req_1__SEL_1: stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap ||
	     stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[231:200],
	       IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578,
	       x_out_data_to_stage2_rd__h6594,
	       x_out_data_to_stage2_addr__h6595,
	       x_out_data_to_stage2_val1__h6596,
	       x_out_data_to_stage2_val2__h6597 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	     NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1091 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 or
	  MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2;
    MUX_near_mem$imem_req_1__SEL_1: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[166:103],
	       stage2_rg_stage2[168:167],
	       stage2_rg_stage2[102:101] == 2'd0 ||
	       near_mem$dmem_valid && !near_mem$dmem_exc,
	       x_out_data_to_stage3_rd__h6020,
	       x_out_data_to_stage3_rd_val__h6021 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd2 ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { near_mem$imem_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       near_mem$imem_is_i32_not_i16,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       near_mem$imem_tval,
	       near_mem$imem_instr,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_10 or
	  MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_10;
    MUX_near_mem$imem_req_1__SEL_1: stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stageD_rl_reset ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_trap_fetch or
	  new_epoch__h10618 or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_2 or
	  stageF_rg_epoch or MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 2'd0;
    WILL_FIRE_RL_rl_trap_fetch: stageF_rg_epoch$D_IN = new_epoch__h10618;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = new_epoch__h10618;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = new_epoch__h10618;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = new_epoch__h10618;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = new_epoch__h10618;
    MUX_near_mem$imem_req_1__SEL_2: stageF_rg_epoch$D_IN = stageF_rg_epoch;
    MUX_near_mem$imem_req_1__SEL_1: stageF_rg_epoch$D_IN = new_epoch__h10618;
    default: stageF_rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageF_rg_full$write_1__VAL_7 or MUX_near_mem$imem_req_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_pipe:
	stageF_rg_full$D_IN = MUX_stageF_rg_full$write_1__VAL_7;
    MUX_near_mem$imem_req_1__SEL_1: stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stageF_rg_priv
  assign stageF_rg_priv$D_IN = rg_cur_priv ;
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h15766 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447)
  begin
    case (IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447)
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd9: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0] ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h15083 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__60_A_ETC___d972 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_3) ?
	       rg_trap_instr[11:7] :
	       stage3_rg_stage3[36:32] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_3) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[31:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;

  // submodule near_mem
  assign near_mem$dma_server_araddr = dma_server_araddr ;
  assign near_mem$dma_server_arburst = dma_server_arburst ;
  assign near_mem$dma_server_arcache = dma_server_arcache ;
  assign near_mem$dma_server_arid = dma_server_arid ;
  assign near_mem$dma_server_arlen = dma_server_arlen ;
  assign near_mem$dma_server_arlock = dma_server_arlock ;
  assign near_mem$dma_server_arprot = dma_server_arprot ;
  assign near_mem$dma_server_arqos = dma_server_arqos ;
  assign near_mem$dma_server_arregion = dma_server_arregion ;
  assign near_mem$dma_server_arsize = dma_server_arsize ;
  assign near_mem$dma_server_arvalid = dma_server_arvalid ;
  assign near_mem$dma_server_awaddr = dma_server_awaddr ;
  assign near_mem$dma_server_awburst = dma_server_awburst ;
  assign near_mem$dma_server_awcache = dma_server_awcache ;
  assign near_mem$dma_server_awid = dma_server_awid ;
  assign near_mem$dma_server_awlen = dma_server_awlen ;
  assign near_mem$dma_server_awlock = dma_server_awlock ;
  assign near_mem$dma_server_awprot = dma_server_awprot ;
  assign near_mem$dma_server_awqos = dma_server_awqos ;
  assign near_mem$dma_server_awregion = dma_server_awregion ;
  assign near_mem$dma_server_awsize = dma_server_awsize ;
  assign near_mem$dma_server_awvalid = dma_server_awvalid ;
  assign near_mem$dma_server_bready = dma_server_bready ;
  assign near_mem$dma_server_rready = dma_server_rready ;
  assign near_mem$dma_server_wdata = dma_server_wdata ;
  assign near_mem$dma_server_wlast = dma_server_wlast ;
  assign near_mem$dma_server_wstrb = dma_server_wstrb ;
  assign near_mem$dma_server_wvalid = dma_server_wvalid ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h6595 ;
  assign near_mem$dmem_req_f3 = MUX_rg_trap_instr$write_1__VAL_1[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  assign near_mem$dmem_req_op =
	     IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 !=
	     2'd1 ;
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value =
	     { 32'd0, x_out_data_to_stage2_val2__h6597 } ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_near_mem$imem_req_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_near_mem$imem_req_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_rg_state$write_1__SEL_7 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_near_mem$imem_req_1__SEL_1:
	  near_mem$imem_req_addr = soc_map$m_pc_reset_value[31:0];
      MUX_near_mem$imem_req_1__SEL_2:
	  near_mem$imem_req_addr = stageF_branch_predictor$predict_rsp;
      MUX_rg_state$write_1__SEL_7: near_mem$imem_req_addr = rg_next_pc;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 = 3'b010 ;
  assign near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  assign near_mem$imem_req_priv = rg_cur_priv ;
  assign near_mem$imem_req_satp = csr_regfile$read_satp ;
  assign near_mem$imem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$mem_master_arready = mem_master_arready ;
  assign near_mem$mem_master_awready = mem_master_awready ;
  assign near_mem$mem_master_bid = mem_master_bid ;
  assign near_mem$mem_master_bresp = mem_master_bresp ;
  assign near_mem$mem_master_bvalid = mem_master_bvalid ;
  assign near_mem$mem_master_rdata = mem_master_rdata ;
  assign near_mem$mem_master_rid = mem_master_rid ;
  assign near_mem$mem_master_rlast = mem_master_rlast ;
  assign near_mem$mem_master_rresp = mem_master_rresp ;
  assign near_mem$mem_master_rvalid = mem_master_rvalid ;
  assign near_mem$mem_master_wready = mem_master_wready ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) &&
	     (IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 ==
	      2'd1 ||
	      IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 ==
	      2'd2) ;
  assign near_mem$EN_server_fence_i_request_put =
	     CAN_FIRE_RL_rl_stage1_FENCE_I ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$bp_train_cf_info =
	     (stage1_rg_full &&
	      (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	       NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) &&
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	      4'd0) ?
	       { IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[151:145] != 7'b1100011 ||
		 IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234,
		 alu_outputs_cf_info_fallthru_PC__h8496,
		 alu_outputs_cf_info_taken_PC__h8497 } :
	       99'h6AAAAAAAAAAAAAAAAAAAAAAAA ;
  assign stageF_branch_predictor$bp_train_instr = near_mem$imem_instr ;
  assign stageF_branch_predictor$bp_train_is_i32_not_i16 =
	     near_mem$imem_is_i32_not_i16 ;
  assign stageF_branch_predictor$bp_train_pc = near_mem$imem_pc ;
  always@(MUX_near_mem$imem_req_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_near_mem$imem_req_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_rg_state$write_1__SEL_7 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_near_mem$imem_req_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc =
	      soc_map$m_pc_reset_value[31:0];
      MUX_near_mem$imem_req_1__SEL_2:
	  stageF_branch_predictor$predict_req_pc =
	      stageF_branch_predictor$predict_rsp;
      MUX_rg_state$write_1__SEL_7:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      default: stageF_branch_predictor$predict_req_pc =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$predict_rsp_instr = near_mem$imem_instr ;
  assign stageF_branch_predictor$predict_rsp_is_i32_not_i16 =
	     near_mem$imem_is_i32_not_i16 ;
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign stageF_branch_predictor$EN_bp_train =
	     WILL_FIRE_RL_rl_pipe &&
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d735 =
	     ((stage1_rg_stage_input[151:145] == 7'b1100011) ?
		stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d696 :
		stage1_rg_stage_input[151:145] == 7'b1101111 ||
		stage1_rg_stage_input[151:145] == 7'b1100111) ?
	       data_to_stage2_addr__h6585 :
	       ((stage1_rg_stage_input[151:145] == 7'b1110011 &&
		 stage1_rg_stage_input[112:110] == 3'd0 &&
		 stage1_rg_stage_input[144:140] == 5'd0 &&
		 stage1_rg_stage_input[139:135] == 5'd0 &&
		 stage1_rg_stage_input[87:76] == 12'b000000000001) ?
		  stage1_rg_stage_input[305:274] :
		  32'd0) ;
  assign IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 =
	     next_pc__h6536 == stage1_rg_stage_input[183:152] ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023 ?
	       IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	       4'd0 &&
	       !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 &&
	       stageF_rg_full &&
	       !near_mem$imem_valid :
	       stage1_rg_full ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1038 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     !near_mem$imem_valid ||
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1034 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	     stageF_branch_predictor$RDY_predict_req ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023 ?
	       IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	       4'd0 ||
	       IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid :
	       !stage1_rg_full ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1173 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1174 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1034 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1185 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     (csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1181 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd0 ||
	      IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1186 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     (csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1181 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd0 ||
	      IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744) ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1211 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027 &&
	      stageD_rg_full ||
	      !near_mem$imem_valid) &&
	     stageF_rg_full ;
  assign IF_NOT_near_mem_dmem_valid__7_03_OR_NOT_near_m_ETC___d144 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[100:96] == 5'd0) ? 2'd0 : 2'd1) :
	       2'd0 ;
  assign IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105 =
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 ;
  assign IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1109 =
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	     IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 ==
	     2'd0 ;
  assign IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1113 =
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	     IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 ==
	     2'd1 ;
  assign IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1117 =
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	     IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 !=
	     2'd0 &&
	     IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 !=
	     2'd1 ;
  assign IF_NOT_stage1_rg_stage_input_59_BITS_112_TO_11_ETC___d389 =
	     NOT_stage1_rg_stage_input_59_BITS_112_TO_110_8_ETC___d273 ?
	       4'd12 :
	       4'd1 ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_251_BITS_ETC___d1304 =
	     csr_regfile$read_csr[31:0] | rs1_val__h15766 ;
  assign IF_rg_cur_priv_5_EQ_0b11_12_AND_stage1_rg_stag_ETC___d426 =
	     (rg_cur_priv == 2'b11 &&
	      stage1_rg_stage_input[87:76] == 12'b001100000010) ?
	       4'd8 :
	       (rg_cur_priv_5_EQ_0b11_12_OR_rg_cur_priv_5_EQ_0_ETC___d424 ?
		  4'd11 :
		  4'd12) ;
  assign IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 =
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ?
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 :
	       2'd0 ;
  assign IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302 =
	     IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 &&
	     branch_target__h6726[1] ||
	     stage1_rg_stage_input[112:110] != 3'd0 &&
	     stage1_rg_stage_input[112:110] != 3'b001 &&
	     stage1_rg_stage_input[112:110] != 3'b100 &&
	     stage1_rg_stage_input[112:110] != 3'b101 &&
	     stage1_rg_stage_input[112:110] != 3'b110 &&
	     stage1_rg_stage_input[112:110] != 3'b111 ;
  assign IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223 =
	     rs1_val_bypassed__h3794 == rs2_val__h6722 ;
  assign IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225 =
	     (rs1_val_bypassed__h3794 ^ 32'h80000000) <
	     (rs2_val__h6722 ^ 32'h80000000) ;
  assign IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227 =
	     rs1_val_bypassed__h3794 < rs2_val__h6722 ;
  assign IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d296 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 :
	       (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		  stage1_rg_stage_input[151:145] == 7'b0110011) &&
		 (stage1_rg_stage_input[112:110] == 3'b001 ||
		  stage1_rg_stage_input[112:110] == 3'b101)) ?
		  stage1_rg_stage_input[231] ||
		  stage1_rg_stage_input[229:226] != 4'b0 ||
		  stage1_rg_stage_input[151:145] == 7'b0010011 &&
		  stage1_rg_stage_input[225] :
		  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q9) ;
  assign IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d366 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'd0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 :
	       (((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		  stage1_rg_stage_input[151:145] == 7'b0110011) &&
		 (stage1_rg_stage_input[112:110] == 3'b001 ||
		  stage1_rg_stage_input[112:110] == 3'b101)) ?
		  !stage1_rg_stage_input[231] &&
		  stage1_rg_stage_input[229:226] == 4'b0 &&
		  (stage1_rg_stage_input[151:145] != 7'b0010011 ||
		   !stage1_rg_stage_input[225]) :
		  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11) ;
  assign IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d660 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       alu_outputs___1_val1__h6850 :
	       IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659 ;
  assign IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d729 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'd0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 ||
	       !branch_target__h6726[1] :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 &&
	       (stage1_rg_stage_input[151:145] != 7'b1110011 ||
		stage1_rg_stage_input[112:110] != 3'd0 ||
		stage1_rg_stage_input[144:140] != 5'd0 ||
		stage1_rg_stage_input[139:135] != 5'd0 ||
		stage1_rg_stage_input[87:76] != 12'b0 &&
		stage1_rg_stage_input[87:76] != 12'b000000000001) ;
  assign IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 =
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ?
	       (stage1_rg_stage_input[268] ?
		  4'd12 :
		  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444) :
	       4'd0 ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 =
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 ==
	     2'd1 &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) ||
	     stage1_rg_stage_input[268] ||
	     IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d296 &&
	     IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322 ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 :
	       2'd0 ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 =
	     stage2_rg_stage2[100:96] == stage1_rg_stage_input[139:135] ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165 =
	     stage2_rg_stage2[100:96] == stage1_rg_stage_input[134:130] ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379 =
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 ==
	     2'd1 &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) ||
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d366 ||
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376) ;
  assign IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 =
	     stage2_rg_full ?
	       IF_stage2_rg_stage2_1_BITS_102_TO_101_2_EQ_0_3_ETC___d92 :
	       2'd0 ;
  assign IF_stage2_rg_stage2_1_BITS_102_TO_101_2_EQ_0_3_ETC___d92 =
	     (stage2_rg_stage2[102:101] == 2'd0) ?
	       2'd2 :
	       (near_mem$dmem_valid ?
		  (near_mem$dmem_exc ? 2'd3 : 2'd2) :
		  2'd1) ;
  assign NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d1071 =
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	     (stage2_rg_stage2[102:101] == 2'd0 ||
	      near_mem$dmem_valid && !near_mem$dmem_exc) ;
  assign NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 =
	     cur_verbosity__h2190 > 4'd1 ;
  assign NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1091 =
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     (IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	      !stageF_rg_full ||
	      near_mem$imem_valid) ;
  assign NOT_IF_stage1_rg_full_58_THEN_IF_stage1_rg_sta_ETC___d1121 =
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     (!stageF_rg_full || near_mem$imem_valid) &&
	     !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ;
  assign NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020 =
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 !=
	      2'd1 ||
	      !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 &&
	      !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) &&
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d366 ||
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376) ;
  assign NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d116 =
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	     2'd3 &&
	     (stage2_rg_stage2[102:101] == 2'd0 ||
	      near_mem$dmem_valid && !near_mem$dmem_exc) ;
  assign NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 =
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 !=
	      2'd1 ||
	      !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 &&
	      !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) &&
	     (stage1_rg_stage_input[268] ||
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d296 &&
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1019 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d1015) &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd2 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1023 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1019 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1032 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1034 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1032 &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd2 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd0) &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1057 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1052 ||
	     NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1054 ||
	     !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 &&
	     stageF_rg_full &&
	     !near_mem$imem_valid ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1080 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      !stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd2 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1032 &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd2 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd0) &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1218 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd2 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1226 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !stage1_rg_stage_input[268] &&
	     (IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d366 ||
	      IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376) ;
  assign NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1052 =
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd0) &&
	     (!stage1_rg_full ||
	      !stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) ;
  assign NOT_stage1_rg_full_58_83_OR_stage1_rg_stage_in_ETC___d1054 =
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012) &&
	     (!stage1_rg_full ||
	      !stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) ;
  assign NOT_stage1_rg_stage_input_59_BITS_112_TO_110_8_ETC___d273 =
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[230]) &&
	     (stage1_rg_stage_input[112:110] != 3'd0 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[230]) &&
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q8 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1355 =
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 ||
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1359 =
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d1355 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325) &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 =
	     !stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 !=
	     2'd1 ||
	     !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 &&
	     !IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d520 =
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd11 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532 =
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 ==
	     2'd3 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536 =
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 ==
	     2'd0 ;
  assign NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d542 =
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	     IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 !=
	     2'd3 &&
	     IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 !=
	     2'd0 ;
  assign SEXT_stage1_rg_stage_input_59_BITS_87_TO_76_15___d316 =
	     { {20{stage1_rg_stage_input_BITS_87_TO_76__q7[11]}},
	       stage1_rg_stage_input_BITS_87_TO_76__q7 } ;
  assign _theResult_____1_fst__h7844 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[230]) ?
	       rd_val___1__h7840 :
	       _theResult_____1_fst__h7851 ;
  assign _theResult_____1_fst__h7879 =
	     rs1_val_bypassed__h3794 & _theResult___snd_snd__h8801 ;
  assign _theResult____h14607 =
	     (delta_CPI_instrs__h14606 == 64'd0) ?
	       delta_CPI_instrs___1__h14642 :
	       delta_CPI_instrs__h14606 ;
  assign _theResult___snd_snd__h8801 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       SEXT_stage1_rg_stage_input_59_BITS_87_TO_76_15___d316 :
	       rs2_val__h6722 ;
  assign alu_outputs___1_addr__h6748 =
	     IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 ?
	       branch_target__h6726 :
	       ret_pc__h6755 ;
  assign alu_outputs___1_addr__h6955 =
	     rs1_val_bypassed__h3794 +
	     { {20{stage1_rg_stage_input_BITS_75_TO_64__q6[11]}},
	       stage1_rg_stage_input_BITS_75_TO_64__q6 } ;
  assign alu_outputs___1_exc_code__h6745 =
	     stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d696 ?
	       4'd0 :
	       4'd2 ;
  assign alu_outputs___1_exc_code__h7147 =
	     (stage1_rg_stage_input[112:110] == 3'd0) ?
	       ((stage1_rg_stage_input[144:140] == 5'd0 &&
		 stage1_rg_stage_input[139:135] == 5'd0) ?
		  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val1__h6850 =
	     (stage1_rg_stage_input[112:110] == 3'b001) ?
	       rd_val__h8702 :
	       (stage1_rg_stage_input[230] ? rd_val__h8775 : rd_val__h8753) ;
  assign alu_outputs___1_val1__h6888 =
	     (stage1_rg_stage_input[112:110] == 3'd0 &&
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       !stage1_rg_stage_input[230])) ?
	       rd_val___1__h7759 :
	       _theResult_____1_fst__h7844 ;
  assign alu_outputs___1_val1__h7151 =
	     stage1_rg_stage_input[112] ?
	       { 27'd0, stage1_rg_stage_input[139:135] } :
	       rs1_val_bypassed__h3794 ;
  assign alu_outputs_cf_info_fallthru_PC__h8496 =
	     x_out_cf_info_fallthru_PC__h8504 ;
  assign alu_outputs_cf_info_taken_PC__h8497 = x_out_cf_info_taken_PC__h8505 ;
  assign branch_target__h6726 =
	     stage1_rg_stage_input[305:274] +
	     { {19{stage1_rg_stage_input_BITS_63_TO_51__q1[12]}},
	       stage1_rg_stage_input_BITS_63_TO_51__q1 } ;
  assign cpi__h14609 = x__h14608 / 64'd10 ;
  assign cpifrac__h14610 = x__h14608 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__60_A_ETC___d972 =
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1177 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020 ||
	      NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325) ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1181 =
	     csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1177 ||
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	     2'd2 &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	     2'd0 ||
	     !stage1_rg_full ||
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1208 =
	     csr_regfile_interrupt_pending_rg_cur_priv_5_00_ETC___d1181 ||
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	     4'd0 ||
	     IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744 ||
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1027 &&
	     stageD_rg_full ;
  assign csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1254 =
	     delta_CPI_cycles__h14605 * 64'd10 ;
  assign cur_verbosity__h2190 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h6585 = x_out_data_to_stage2_addr__h6595 ;
  assign data_to_stage2_rd__h6584 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       5'd0 :
	       stage1_rg_stage_input[144:140] ;
  assign decoded_instr_funct10__h12404 =
	     { stageD_rg_data[63:57], stageD_rg_data[46:44] } ;
  assign decoded_instr_imm12_S__h12406 =
	     { stageD_rg_data[63:57], stageD_rg_data[43:39] } ;
  assign decoded_instr_imm13_SB__h12407 =
	     { stageD_rg_data[63],
	       stageD_rg_data[39],
	       stageD_rg_data[62:57],
	       stageD_rg_data[43:40],
	       1'b0 } ;
  assign decoded_instr_imm21_UJ__h12409 =
	     { stageD_rg_data[63],
	       stageD_rg_data[51:44],
	       stageD_rg_data[52],
	       stageD_rg_data[62:53],
	       1'b0 } ;
  assign delta_CPI_cycles__h14605 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h14642 = delta_CPI_instrs__h14606 + 64'd1 ;
  assign delta_CPI_instrs__h14606 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h6925 =
	     rs1_val_bypassed__h3794 +
	     SEXT_stage1_rg_stage_input_59_BITS_87_TO_76_15___d316 ;
  assign fall_through_pc__h6535 =
	     stage1_rg_stage_input[305:274] +
	     (stage1_rg_stage_input[269] ? 32'd4 : 32'd2) ;
  assign near_mem_imem_valid__58_AND_near_mem_imem_exc__ETC___d956 =
	     near_mem$imem_valid && near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign new_epoch__h10618 = rg_epoch + 2'd1 ;
  assign next_pc__h6536 = x_out_next_pc__h6552 ;
  assign next_pc__h6754 =
	     stage1_rg_stage_input[305:274] +
	     { {11{stage1_rg_stage_input_BITS_30_TO_10__q2[20]}},
	       stage1_rg_stage_input_BITS_30_TO_10__q2 } ;
  assign next_pc__h6781 = { eaddr__h6925[31:1], 1'd0 } ;
  assign rd_val___1__h7759 =
	     rs1_val_bypassed__h3794 + _theResult___snd_snd__h8801 ;
  assign rd_val___1__h7840 =
	     rs1_val_bypassed__h3794 - _theResult___snd_snd__h8801 ;
  assign rd_val___1__h7847 =
	     ((rs1_val_bypassed__h3794 ^ 32'h80000000) <
	      (_theResult___snd_snd__h8801 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h7854 =
	     (rs1_val_bypassed__h3794 < _theResult___snd_snd__h8801) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h7861 =
	     rs1_val_bypassed__h3794 ^ _theResult___snd_snd__h8801 ;
  assign rd_val___1__h7868 =
	     rs1_val_bypassed__h3794 | _theResult___snd_snd__h8801 ;
  assign rd_val__h6437 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == stage1_rg_stage_input[139:135]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h6511 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == stage1_rg_stage_input[134:130]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h6895 = { stage1_rg_stage_input[50:31], 12'h0 } ;
  assign rd_val__h6909 = stage1_rg_stage_input[305:274] + rd_val__h6895 ;
  assign rd_val__h8702 = rs1_val_bypassed__h3794 << shamt__h6837 ;
  assign rd_val__h8753 = rs1_val_bypassed__h3794 >> shamt__h6837 ;
  assign rd_val__h8775 =
	     rs1_val_bypassed__h3794 >> shamt__h6837 |
	     ~(32'hFFFFFFFF >> shamt__h6837) &
	     {32{rs1_val_bypassed__h3794[31]}} ;
  assign ret_pc__h6755 = x_out_cf_info_fallthru_PC__h8504 ;
  assign rg_cur_priv_5_EQ_0b11_12_OR_rg_cur_priv_5_EQ_0_ETC___d424 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000101 ;
  assign rg_state_4_EQ_3_039_AND_NOT_csr_regfile_interr_ETC___d1230 =
	     rg_state == 4'd3 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1226 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 ==
	     2'd0 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 ;
  assign rg_state_4_EQ_3_039_AND_stage3_rg_full_1_OR_NO_ETC___d1049 =
	     rg_state == 4'd3 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	      2'd0 ||
	      stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	      2'd3) &&
	     stage3_rg_full_1_OR_NOT_IF_stage2_rg_full_0_TH_ETC___d1047 ;
  assign rg_trap_info_240_BITS_67_TO_36_241_EQ_csr_regf_ETC___d1250 =
	     rg_trap_info[67:36] == csr_regfile$csr_trap_actions[97:66] ;
  assign rs1_val__h15083 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 27'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed__h3794 =
	     (stage1_rg_stage_input[139:135] == 5'd0) ? 32'd0 : val__h6439 ;
  assign rs2_val__h6722 =
	     (stage1_rg_stage_input[134:130] == 5'd0) ? 32'd0 : val__h6513 ;
  assign shamt__h6837 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       stage1_rg_stage_input[80:76] :
	       rs2_val__h6722[4:0] ;
  assign stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382 =
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) ;
  assign stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d351 =
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[230]) ||
	     stage1_rg_stage_input[112:110] == 3'd0 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[230] ||
	     CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q10 ;
  assign stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d696 =
	     (stage1_rg_stage_input[112:110] == 3'd0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b111) &&
	     IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 &&
	     branch_target__h6726[1] ;
  assign stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d1015 =
	     (stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d1012 ||
	      IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 ==
	      4'd0) &&
	     (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) ;
  assign stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 =
	     stage1_rg_stage_input[271:270] == rg_epoch ;
  assign stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179 =
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 ==
	     2'd1 &&
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163 ||
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) ;
  assign stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d691 =
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	     NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 !=
	     4'd11 ;
  assign stage1_rg_stage_input_BITS_30_TO_10__q2 =
	     stage1_rg_stage_input[30:10] ;
  assign stage1_rg_stage_input_BITS_63_TO_51__q1 =
	     stage1_rg_stage_input[63:51] ;
  assign stage1_rg_stage_input_BITS_75_TO_64__q6 =
	     stage1_rg_stage_input[75:64] ;
  assign stage1_rg_stage_input_BITS_87_TO_76__q7 =
	     stage1_rg_stage_input[87:76] ;
  assign stage3_rg_full_1_OR_NOT_IF_stage2_rg_full_0_TH_ETC___d1047 =
	     stage3_rg_full ||
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 !=
	     2'd0 ||
	     !stage1_rg_full ||
	     !stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	     IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379 ;
  assign stageD_f_reset_rsps_i_notEmpty__81_AND_stage1__ETC___d994 =
	     stageD_f_reset_rsps$EMPTY_N && stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset || stageF_branch_predictor$RDY_predict_req) ;
  assign trap_info_tval__h8338 =
	     IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d729 ?
	       stage1_rg_stage_input[231:200] :
	       IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d735 ;
  assign val__h6439 =
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 ==
	      2'd2 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d163) ?
	       stage2_rg_stage2[63:32] :
	       rd_val__h6437 ;
  assign val__h6513 =
	     (IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 ==
	      2'd2 &&
	      IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d165) ?
	       stage2_rg_stage2[63:32] :
	       rd_val__h6511 ;
  assign value__h8383 =
	     stage1_rg_stage_input[268] ?
	       stage1_rg_stage_input[263:232] :
	       trap_info_tval__h8338 ;
  assign x__h14608 =
	     csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1254[63:0] /
	     _theResult____h14607 ;
  assign x_exc_code__h19754 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_cf_info_fallthru_PC__h8504 =
	     stage1_rg_stage_input[305:274] + 32'd4 ;
  assign x_out_data_to_stage2_rd__h6594 =
	     stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ?
	       data_to_stage2_rd__h6584 :
	       5'd0 ;
  assign x_out_data_to_stage2_val2__h6597 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       branch_target__h6726 :
	       rs2_val__h6722 ;
  assign x_out_next_pc__h6552 =
	     IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376 ?
	       data_to_stage2_addr__h6585 :
	       fall_through_pc__h6535 ;
  assign x_out_trap_info_exc_code__h8343 =
	     stage1_rg_stage_input[268] ?
	       stage1_rg_stage_input[267:264] :
	       alu_outputs_exc_code__h7166 ;
  assign y__h16035 = ~rs1_val__h15766 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[102:101])
      2'd0, 2'd1: x_out_data_to_stage3_rd__h6020 = stage2_rg_stage2[100:96];
      default: x_out_data_to_stage3_rd__h6020 = 5'd0;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[102:101])
      2'd0: x_out_data_to_stage3_rd_val__h6021 = stage2_rg_stage2[63:32];
      2'd1: x_out_data_to_stage3_rd_val__h6021 = near_mem$dmem_word64[31:0];
      default: x_out_data_to_stage3_rd_val__h6021 = stage2_rg_stage2[63:32];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h15766 = rg_csr_val1;
      default: rs1_val__h15766 = { 27'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q3)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q3;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q4 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_NOT_near_mem_dmem_valid__7_03_OR_NOT_near_m_ETC___d144)
  begin
    case (stage2_rg_stage2[102:101])
      2'd0: CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 = 2'd2;
      2'd1:
	  CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 =
	      IF_NOT_near_mem_dmem_valid__7_03_OR_NOT_near_m_ETC___d144;
      default: CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 = 2'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227 or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223 or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
	      IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223;
      3'b001:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
	      !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223;
      3'b100:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
	      IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225;
      3'b101:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
	      !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225;
      3'b110:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
	      IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227;
      default: IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h6955 or
	  eaddr__h6925 or
	  alu_outputs___1_addr__h6748 or next_pc__h6781 or next_pc__h6754)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011: x_out_data_to_stage2_addr__h6595 = eaddr__h6925;
      7'b1100011:
	  x_out_data_to_stage2_addr__h6595 = alu_outputs___1_addr__h6748;
      7'b1100111: x_out_data_to_stage2_addr__h6595 = next_pc__h6781;
      7'b1101111: x_out_data_to_stage2_addr__h6595 = next_pc__h6754;
      default: x_out_data_to_stage2_addr__h6595 = alu_outputs___1_addr__h6955;
    endcase
  end
  always@(stage1_rg_stage_input or
	  next_pc__h6781 or branch_target__h6726 or next_pc__h6754)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011: x_out_cf_info_taken_PC__h8505 = branch_target__h6726;
      7'b1101111: x_out_cf_info_taken_PC__h8505 = next_pc__h6754;
      default: x_out_cf_info_taken_PC__h8505 = next_pc__h6781;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult_____1_fst__h7879 or
	  rd_val___1__h7847 or
	  rd_val___1__h7854 or rd_val___1__h7861 or rd_val___1__h7868)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010: _theResult_____1_fst__h7851 = rd_val___1__h7847;
      3'b011: _theResult_____1_fst__h7851 = rd_val___1__h7854;
      3'b100: _theResult_____1_fst__h7851 = rd_val___1__h7861;
      3'b110: _theResult_____1_fst__h7851 = rd_val___1__h7868;
      default: _theResult_____1_fst__h7851 = _theResult_____1_fst__h7879;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227 or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223 or
	  IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
	      !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223;
      3'b001:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
	      IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d223;
      3'b100:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
	      !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225;
      3'b101:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
	      IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d225;
      3'b110:
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
	      !IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227;
      default: IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   IF_stage1_rg_stage_input_59_BITS_139_TO_135_62_ETC___d227;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q8 =
	      stage1_rg_stage_input[151:145] != 7'b0010011 &&
	      stage1_rg_stage_input[231] &&
	      stage1_rg_stage_input[230] &&
	      stage1_rg_stage_input[229:225] != 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q8 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   stage1_rg_stage_input[151:145] != 7'b0010011 &&
		   stage1_rg_stage_input[231] &&
		   stage1_rg_stage_input[230] &&
		   stage1_rg_stage_input[229:225] != 5'b0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_stage1_rg_stage_input_59_BITS_112_TO_110_8_ETC___d273)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q9 =
	      NOT_stage1_rg_stage_input_59_BITS_112_TO_110_8_ETC___d273;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q9 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   ((stage1_rg_stage_input[151:145] == 7'b0000011) ?
		      stage1_rg_stage_input[112:110] != 3'd0 &&
		      stage1_rg_stage_input[112:110] != 3'b100 &&
		      stage1_rg_stage_input[112:110] != 3'b001 &&
		      stage1_rg_stage_input[112:110] != 3'b101 &&
		      stage1_rg_stage_input[112:110] != 3'b010 :
		      stage1_rg_stage_input[151:145] != 7'b0100011 ||
		      stage1_rg_stage_input[112:110] != 3'd0 &&
		      stage1_rg_stage_input[112:110] != 3'b001 &&
		      stage1_rg_stage_input[112:110] != 3'b010);
    endcase
  end
  always@(stage1_rg_stage_input or
	  eaddr__h6925 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 or
	  next_pc__h6754)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322 =
	      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302 ||
	      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308;
      7'b1101111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322 =
	      next_pc__h6754[1];
      default: IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d322 =
		   stage1_rg_stage_input[151:145] != 7'b1100111 ||
		   eaddr__h6925[1] ||
		   stage1_rg_stage_input[112:110] != 3'd0;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q10 =
	      stage1_rg_stage_input[151:145] == 7'b0010011 ||
	      !stage1_rg_stage_input[231] ||
	      !stage1_rg_stage_input[230] ||
	      stage1_rg_stage_input[229:225] == 5'b0;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b1_ETC__q10 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   (stage1_rg_stage_input[151:145] == 7'b0010011 ||
		    !stage1_rg_stage_input[231] ||
		    !stage1_rg_stage_input[230] ||
		    stage1_rg_stage_input[229:225] == 5'b0);
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d351)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
	      stage1_rg_stage_input_59_BITS_112_TO_110_88_EQ_ETC___d351;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
		   stage1_rg_stage_input[151:145] == 7'b0110111 ||
		   stage1_rg_stage_input[151:145] == 7'b0010111 ||
		   ((stage1_rg_stage_input[151:145] == 7'b0000011) ?
		      stage1_rg_stage_input[112:110] == 3'd0 ||
		      stage1_rg_stage_input[112:110] == 3'b100 ||
		      stage1_rg_stage_input[112:110] == 3'b001 ||
		      stage1_rg_stage_input[112:110] == 3'b101 ||
		      stage1_rg_stage_input[112:110] == 3'b010 :
		      stage1_rg_stage_input[151:145] == 7'b0100011 &&
		      (stage1_rg_stage_input[112:110] == 3'd0 ||
		       stage1_rg_stage_input[112:110] == 3'b001 ||
		       stage1_rg_stage_input[112:110] == 3'b010));
    endcase
  end
  always@(stage1_rg_stage_input or
	  eaddr__h6925 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 or
	  branch_target__h6726 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 or
	  next_pc__h6754)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376 =
	      (IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d308 ||
	       !branch_target__h6726[1]) &&
	      (stage1_rg_stage_input[112:110] == 3'd0 ||
	       stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b100 ||
	       stage1_rg_stage_input[112:110] == 3'b101 ||
	       stage1_rg_stage_input[112:110] == 3'b110 ||
	       stage1_rg_stage_input[112:110] == 3'b111) &&
	      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234;
      7'b1101111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376 =
	      !next_pc__h6754[1];
      default: IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d376 =
		   stage1_rg_stage_input[151:145] == 7'b1100111 &&
		   !eaddr__h6925[1] &&
		   stage1_rg_stage_input[112:110] == 3'd0;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q12 = 4'd1;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q12 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0, 3'b001, 3'b010:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q13 = 4'd1;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q13 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_rg_cur_priv_5_EQ_0b11_12_AND_stage1_rg_stag_ETC___d426)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0, 12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_1_ETC__q14 = 4'd12;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_1_ETC__q14 =
		   IF_rg_cur_priv_5_EQ_0b11_12_AND_stage1_rg_stag_ETC___d426;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_1_ETC__q14)
  begin
    case (stage1_rg_stage_input[112:110])
      3'd0:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15 =
	      (stage1_rg_stage_input[144:140] == 5'd0 &&
	       stage1_rg_stage_input[139:135] == 5'd0) ?
		CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_1_ETC__q14 :
		4'd12;
      3'b001, 3'b101:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15 = 4'd3;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15 = 4'd4;
      3'd4: CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15 = 4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q12 or
	  IF_NOT_stage1_rg_stage_input_59_BITS_112_TO_11_ETC___d389 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q13 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q12;
      7'b0001111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
	      (stage1_rg_stage_input[112:110] == 3'b001 &&
	       stage1_rg_stage_input[144:140] == 5'd0 &&
	       stage1_rg_stage_input[139:135] == 5'd0 &&
	       stage1_rg_stage_input[87:76] == 12'b0) ?
		4'd6 :
		((stage1_rg_stage_input[112:110] == 3'd0 &&
		  stage1_rg_stage_input[144:140] == 5'd0 &&
		  stage1_rg_stage_input[139:135] == 5'd0 &&
		  (stage1_rg_stage_input[231:228] == 4'b0 ||
		   stage1_rg_stage_input[231:228] == 4'b1000)) ?
		   4'd5 :
		   4'd12);
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
	      IF_NOT_stage1_rg_stage_input_59_BITS_112_TO_11_ETC___d389;
      7'b0010111, 7'b0110111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 = 4'd1;
      7'b0100011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_1_ETC__q13;
      7'b1110011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0_I_ETC__q15;
      default: IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302 or
	  IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 or
	  eaddr__h6925 or next_pc__h6754)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444 =
	      IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d302 ?
		4'd12 :
		(IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234 ?
		   4'd2 :
		   4'd1);
      7'b1100111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444 =
	      (eaddr__h6925[1] || stage1_rg_stage_input[112:110] != 3'd0) ?
		4'd12 :
		4'd2;
      7'b1101111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444 =
	      next_pc__h6754[1] ? 4'd12 : 4'd2;
      default: IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d444 =
		   ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
		     stage1_rg_stage_input[151:145] == 7'b0110011) &&
		    (stage1_rg_stage_input[112:110] == 3'b001 ||
		     stage1_rg_stage_input[112:110] == 3'b101)) ?
		     ((stage1_rg_stage_input[231] ||
		       stage1_rg_stage_input[229:226] != 4'b0 ||
		       stage1_rg_stage_input[151:145] == 7'b0010011 &&
		       stage1_rg_stage_input[225]) ?
			4'd12 :
			4'd1) :
		     IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d440;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 = 2'd0;
      7'b1100111:
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 = 2'd2;
      7'b1101111:
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 = 2'd1;
      default: IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 =
		   2'd3;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 = 2'd1;
      7'b0010011,
      7'b0010111,
      7'b0110011,
      7'b0110111,
      7'b1100011,
      7'b1100111,
      7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 = 2'd0;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 = 2'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_exc_code__h6745 or alu_outputs___1_exc_code__h7147)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111:
	  alu_outputs_exc_code__h7166 = 4'd2;
      7'b1100011:
	  alu_outputs_exc_code__h7166 = alu_outputs___1_exc_code__h6745;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h7166 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h7166 = alu_outputs___1_exc_code__h7147;
      default: alu_outputs_exc_code__h7166 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_val1__h7151 or
	  alu_outputs___1_val1__h6888 or rd_val__h6909 or rd_val__h6895)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659 =
	      alu_outputs___1_val1__h6888;
      7'b0010111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659 =
	      rd_val__h6909;
      7'b0110111:
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659 =
	      rd_val__h6895;
      default: IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d659 =
		   alu_outputs___1_val1__h7151;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d660 or
	  ret_pc__h6755)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h6596 = ret_pc__h6755;
      default: x_out_data_to_stage2_val1__h6596 =
		   IF_stage1_rg_stage_input_59_BITS_151_TO_145_86_ETC___d660;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	s1_to_s2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s2_to_s3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s3_deq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sD_to_s1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sF_to_sD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (s1_to_s2$EN) s1_to_s2 <= `BSV_ASSIGNMENT_DELAY s1_to_s2$D_IN;
	if (s2_to_s3$EN) s2_to_s3 <= `BSV_ASSIGNMENT_DELAY s2_to_s3$D_IN;
	if (s3_deq$EN) s3_deq <= `BSV_ASSIGNMENT_DELAY s3_deq$D_IN;
	if (sD_to_s1$EN) sD_to_s1 <= `BSV_ASSIGNMENT_DELAY sD_to_s1$D_IN;
	if (sF_to_sD$EN) sF_to_sD <= `BSV_ASSIGNMENT_DELAY sF_to_sD$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    rg_csr_pc = 32'hAAAAAAAA;
    rg_csr_val1 = 32'hAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_epoch = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    s1_to_s2 = 1'h0;
    s2_to_s3 = 1'h0;
    s3_deq = 1'h0;
    sD_to_s1 = 1'h0;
    sF_to_sD = 1'h0;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	306'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 = 169'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data = 138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 2'h2;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[37]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[37])
	$write("Rd %0d ",
	       stage3_rg_stage3[36:32],
	       "rd_val:%h",
	       stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[166:135],
		 stage2_rg_stage2[134:103],
		 stage2_rg_stage2[168:167]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[166:135],
	       stage2_rg_stage2[134:103],
	       stage2_rg_stage2[168:167]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3 &&
	  stage2_rg_stage2[102:101] != 2'd0 &&
	  (!near_mem$dmem_valid || near_mem$dmem_exc))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d116)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6020,
	       x_out_data_to_stage3_rd_val__h6021);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", stage2_rg_stage2[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", stage2_rg_stage2[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd1 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 != 2'd0)
	$write("Rd %0d ", stage2_rg_stage2[100:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 != 2'd0 &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d148 != 2'd1)
	$write("rd_val:%h", stage2_rg_stage2[63:32]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d520)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532)
	$write("{", "CF_None");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536)
	$write("{", "BR ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d542)
	$write("{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 == 2'd1)
	$write("JAL [%h->%h/%h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_taken_PC__h8505,
	       x_out_cf_info_fallthru_PC__h8504);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d529 == 2'd2)
	$write("JALR [%h->%h/%h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_taken_PC__h8505,
	       x_out_cf_info_fallthru_PC__h8504);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536)
	if (stage1_rg_stage_input[151:145] != 7'b1100011 ||
	    IF_stage1_rg_stage_input_59_BITS_112_TO_110_88_ETC___d234)
	  $write("taken ");
	else
	  $write("fallthru ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d542)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d532)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d536)
	$write("[%h->%h %h]",
	       stage1_rg_stage_input[305:274],
	       x_out_cf_info_fallthru_PC__h8504,
	       x_out_cf_info_taken_PC__h8505);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d542)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[231:200],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 == 2'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 == 2'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d379) &&
	  IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 != 2'd0 &&
	  IF_stage1_rg_full_58_THEN_IF_stage1_rg_stage_i_ETC___d578 != 2'd1)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h6594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h6595,
	       x_out_data_to_stage2_val1__h6596,
	       x_out_data_to_stage2_val2__h6597);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d691)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("'h%h", stage1_rg_stage_input[305:274]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("'h%h", x_out_trap_info_exc_code__h8343);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 &&
	  NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d325)
	$write("'h%h", value__h8383, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_58_AND_NOT_stage1_rg_stage_inpu_ETC___d382)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d179)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  !IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h6552);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_59_BITS_271_TO_270_6_ETC___d329 &&
	  IF_IF_stage1_rg_stage_input_59_BITS_151_TO_145_ETC___d744)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[137:106],
		 stageD_rg_data[63:32],
		 stageD_rg_data[103:102],
		 stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[137:106],
	       stageD_rg_data[103:102],
	       stageD_rg_data[105:104]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[100] &&
	  stageD_rg_data[101])
	$write("  instr_C:%0h", 16'hAAAA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[100] &&
	  !stageD_rg_data[101])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("  instr:%0h  pred_pc:%0h",
	       stageD_rg_data[63:32],
	       stageD_rg_data[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[100] &&
	  stageD_rg_data[99:96] != 4'd0 &&
	  stageD_rg_data[99:96] != 4'd1 &&
	  stageD_rg_data[99:96] != 4'd2 &&
	  stageD_rg_data[99:96] != 4'd3 &&
	  stageD_rg_data[99:96] != 4'd4 &&
	  stageD_rg_data[99:96] != 4'd5 &&
	  stageD_rg_data[99:96] != 4'd6 &&
	  stageD_rg_data[99:96] != 4'd7 &&
	  stageD_rg_data[99:96] != 4'd8 &&
	  stageD_rg_data[99:96] != 4'd9 &&
	  stageD_rg_data[99:96] != 4'd11 &&
	  stageD_rg_data[99:96] != 4'd12 &&
	  stageD_rg_data[99:96] != 4'd13 &&
	  stageD_rg_data[99:96] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[99:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[100])
	$write(" tval %0h", stageD_rg_data[95:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[100])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && near_mem$imem_valid)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && !near_mem$imem_valid)
	$write(" BUSY: pc:%h", near_mem$imem_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && near_mem$imem_valid)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       near_mem$imem_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && !near_mem$imem_valid)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  !near_mem$imem_exc)
	$write("  instr:%h  pred_pc:%h",
	       near_mem$imem_instr,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && !near_mem$imem_valid)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid__58_AND_near_mem_imem_exc__ETC___d956)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  !near_mem$imem_exc)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && !near_mem$imem_valid)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && near_mem$imem_valid)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full && !near_mem$imem_valid)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       soc_map$m_pc_reset_value[31:0],
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 soc_map$m_pc_reset_value[31:0],
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[36:32],
		 stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[166:135],
	       stage2_rg_stage2[134:103],
	       stage2_rg_stage2[168:167]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23 &&
	  stage2_rg_stage2[102:101] != 2'd0 &&
	  (!near_mem$dmem_valid || near_mem$dmem_exc))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d1071)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6020,
	       x_out_data_to_stage3_rd_val__h6021);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_0_THEN_IF_stage2_rg_stage2_1_ETC___d93 == 2'd2 &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[166:135],
		 stage2_rg_stage2[134:103],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1080 &&
	  stage1_rg_full &&
	  (!stage1_rg_stage_input_59_BITS_271_TO_270_60_EQ_ETC___d161 ||
	   NOT_IF_stage2_rg_full_0_THEN_IF_stage2_rg_stag_ETC___d1020) &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 == 4'd0 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[305:274],
	       stage1_rg_stage_input[231:200],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1109)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1113)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1117)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h6594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h6595,
	       x_out_data_to_stage2_val1__h6596,
	       x_out_data_to_stage2_val2__h6597);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1087 &&
	  IF_stage1_rg_stage_input_59_BITS_271_TO_270_60_ETC___d447 != 4'd0 &&
	  IF_NOT_stage1_rg_full_58_83_OR_NOT_stage1_rg_s_ETC___d1105)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1125 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    CPU_Stage1.enq: 0x%08h", stageD_rg_data[137:106]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1173)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1185)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       stageF_branch_predictor$predict_rsp,
	       stageF_rg_epoch,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1185)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1185)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage2_nonpipe -> CPU_TRAP",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_240_BITS_67_TO_36_241_EQ_csr_regf_ETC___d1250)
	$display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_240_BITS_67_TO_36_241_EQ_csr_regf_ETC___d1250)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h14609,
		 cpifrac__h14610,
		 delta_CPI_cycles__h14605,
		 _theResult____h14607);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_240_BITS_67_TO_36_241_EQ_csr_regf_ETC___d1250)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[67:36],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h2190 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 rg_trap_info[67:36],
		 rg_trap_info[31:0],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h15083,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h15083,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h15766,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h15766,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2190 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  (cur_verbosity__h2190 != 4'd0 ||
	   csr_regfile$read_csr_minstret[19:0] == 20'd0))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[305:274],
		 stage1_rg_stage_input[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h10618,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       1'd0,
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h10618);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d23)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
  end
  // synopsys translate_on
endmodule  // mkCPU

